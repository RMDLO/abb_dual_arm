<launch>

  <!-- This launch file provides a socket-based connection to ABB robots
       using the standard ROS Industrial simple_message protocol.
         ** a new parameter is added to control J23-linkage correction **

       Several nodes are started, to supply both low-level robot communication
       and higher-level actionlib support:
         - robot_state : publishes current joint positions and robot state data
         - motion_download_interface : command robot motion by sending motion points to robot
         - joint_trajectory_action : actionlib interface to control robot motion

    Usage:
      robot_interface.launch robot_ip:=<value> [J23_coupled:=false]
  -->

  <!-- robot_ip: IP-address of the robot's socket-messaging server -->
  <arg name="robot_ip" doc="IP of the controller"/>
  
  <!-- J23_coupled: set TRUE to apply correction for J2/J3 parallel linkage -->
  <arg name="J23_coupled" default="false" doc="If true, compensate for J2-J3 parallel linkage" />
  
  <group ns="mp">
    <!-- copy the specified arguments to the Parameter Server, for use by nodes below -->
    <param name="robot_ip_address" type="str" value="$(arg robot_ip)"/>
    <param name="J23_coupled" type="bool" value="$(arg J23_coupled)"/>

    <!-- <rosparam command="load" file="$(find abb_irb120_support)/config/joint_names_irb120_3_58_mp.yaml" /> -->
    
    <!-- robot_state: publishes joint positions and robot-state data
                     (from socket connection to robot) -->
    <node pkg="abb_driver" type="robot_state" name="robot_state">
      <param name="port" value="11002"/>
    </node>
    
    <!-- motion_download_interface: sends robot motion commands by DOWNLOADING path to robot
                                    (using socket connection to robot) -->
    <node pkg="abb_driver" type="motion_download_interface" name="motion_download_interface">
      <param name="port" value="11000"/>
    </node>
    
    <!-- joint_trajectory_action: provides actionlib interface for high-level robot control -->
    <node pkg="industrial_robot_client" type="joint_trajectory_action" name="joint_trajectory_action"/>
    <node pkg="topic_tools" type="relay" name="mp_joints_relay" args="/mp/joint_states /joint_states"/>

<!--     <remap from="/joint_trajectory_action" to="/mp_controller/joint_trajectory_action" />

    <remap from="/mp_controller/state" to="/mp/feedback_states" />
    <remap from="/mp_controller/command" to="/mp/joint_path_command"/> - -->
    
  </group>

  <group ns="mp_m">
    <!-- copy the specified arguments to the Parameter Server, for use by nodes below -->
    <param name="robot_ip_address" type="str" value="$(arg robot_ip)"/>
    <param name="J23_coupled" type="bool" value="$(arg J23_coupled)"/>

    <!-- <rosparam command="load" file="$(find abb_irb120_support)/config/joint_names_irb120_3_58_mp_m.yaml" /> -->
    
    <!-- robot_state: publishes joint positions and robot-state data
                     (from socket connection to robot) -->
    <node pkg="abb_driver" type="robot_state" name="robot_state">
      <param name="port" value="12002"/>
    </node>
    
    <!-- motion_download_interface: sends robot motion commands by DOWNLOADING path to robot
                                    (using socket connection to robot) -->
    <node pkg="abb_driver" type="motion_download_interface" name="motion_download_interface">
      <param name="port" value="12000"/>
    </node>
    
    <!-- joint_trajectory_action: provides actionlib interface for high-level robot control -->
    <node pkg="industrial_robot_client" type="joint_trajectory_action" name="joint_trajectory_action"/>
    <node pkg="topic_tools" type="relay" name="mp_joints_relay" args="/mp_m/joint_states /joint_states"/>
  
 <!--    <remap from="/joint_trajectory_action" to="/mp_m_controller/joint_trajectory_action" />

    <remap from="/mp_m_controller/state" to="/mp_m/feedback_states" />
    <remap from="/mp_m_controller/command" to="/mp_m/joint_path_command"/> -->

   <!--  <node pkg="moveit_ros_move_group" type="move_group" name="mp_m" output="screen">
    <remap from="joint_states" to="mp_m/joint_states"/>
    </node> -->
  </group>

</launch>
